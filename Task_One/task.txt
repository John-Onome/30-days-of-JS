what is Variable Scope?

JavaScript has lexical (also called static) scoping and closures. 
This means you can tell the scope of an identifier by looking at the source code.
The four scopes are:
	Global - visible by everything
	Function - visible within a function (and its sub-functions and blocks)
	Block - visible within a block (and its sub-blocks)
	Module - visible within a module
Scope is the region of the codebase over which an identifier is valid.
A lexical environment is a mapping between identifier names and the values associated with them.
Scope is formed of a linked nesting of lexical environments, with each level in the nesting 
corresponding to a lexical environment of an ancestor execution context.
These linked lexical environments form a scope "chain". Identifier resolution is the process 
of searching along this chain for a matching identifier.
Identifier resolution only occurs in one direction: outwards. In this way,
outer lexical environments cannot "see" into inner lexical environments.
There are three pertinent factors in deciding the scope of an identifier in JavaScript:
	How an identifier was declared;
	Where an identifier was declared;
	Whether you are in strict mode or non-strict mode;

How is let different from var?

A variable defined using a var statement is known throughout the function it is defined in, from the start of the function. 
A variable defined using a let statement is only known in the block it is defined in, from the moment it is defined onward.
Hoisting
	variables declared with var keyword are hoisted (initialized with undefined before the code is run) 
	which means they are accessible in their enclosing scope even before they are declared:
	let variables are not initialized until their definition is evaluated. 
	Accessing them before the initialization results in a ReferenceError. Variable said to be in 
	"temporal dead zone" from the start of the block until the initialization is processed.
Creating global object property
	At the top level, let, unlike var, does not create a property on the global object:
Redeclaration
	In strict mode, var will let you re-declare the same variable in the same scope while let raises a SyntaxError.